#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Send a RSA NetWitness alert received under the format "Default Script Template"

import sys
import json
import time
import socket
import logging
import logging.handlers


# Global variables.
# Please configure script behaviour from here.
LOG_FILE = "/home/notification/soc_siemapp_netwitness.log"
LOG_FMNT = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
LOG_HOST = "10.0.113.13"
LOG_PORT = 514
LOG_LEVL = logging.DEBUG

# Logging global handler.
# DO NOT MODIFY.
logger = logging.getLogger()
logger.addHandler(logging.handlers.RotatingFileHandler(LOG_FILE, mode='a', maxBytes=1000000, backupCount=3))
logger.addHandler(logging.StreamHandler())
logger.setLevel(LOG_LEVL)
for handler in logger.handlers:
    handler.setFormatter(LOG_FMNT)


def load_alert(alert_raw):
    """Loads an alerts generated by RSA.

    Arguments:
        alert_raw (str): Raw alert JSON string.

    Returns:
        bool, dict: Loading status and alert parsed as a JSON object or a new alert describing the parsing error(s).
    """
    logger.info("loading alert")
    try:
        alert_json = json.loads(alert_raw)
        logger.debug(u"alert fields: {fields}".format(fields=", ".join([field for field, _ in alert_json.items()])))
        # Debug - log alert header
        for key, value in alert_json.items():
            if not isinstance(value, list):
                logger.debug(u"alert[\"{k}\"]: {v}".format(k=key, v=value))
            else:
                logger.debug(u"alert[\"{k}\"]: <list of {s} elements>".format(k=key, s=len(value)))
        # Debug - Log alert first event
        if "events" in alert_json and len(alert_json["events"]) > 0:
            logger.debug(u"event[0] fields: {fields}".format(fields=", ".join([key for key, _ in alert_json["events"][0].items()])))
    except Exception as error:
        logger.warning(u"cannot load alert: {err}".format(err=str(error)))
        logger.exception(error)
        logger.info("generating dummy alert")
        return False, {
            "time": unicode( time.strftime("%Y-%m-%dT%H:%M:%SZ", time.localtime())),
            "module_name": unicode("XLM-OTHE-NOCL-000 Alert parsing error: {err}".format(err=str(error))),
            "events": []}
    return True, alert_json


def validate_alert(alert_json):
    """Validate an alert structure.

    Arguments:
        alert_json (dict): Loaded alert.

    Returns:
        bool, dict: Validation status and validated alert or new alert describing the validation error(s).
    """
    logger.info("validating alert")
    errors = []
    # Validate alert root structure.
    for field, e_type in [("time", unicode), ("module_name", unicode), ("events", list)]:
        if field not in alert_json:
            errors.append("missing field: '{name}'".format(name=field))
        elif not isinstance(alert_json[field], e_type):
            errors.append("invalid field: '{name}': expected type '{e_type}', got '{g_type}'".format(name=field, e_type=e_type, g_type=type(alert_json[field])))
    # Validate 'events' content.
    if "events" in alert_json and len(alert_json["events"]) < 1:
        errors.append("invalid field 'events': no events in list")
    # Return error-describing alert if any errors has occured, or returned original alert.
    if len(errors) > 0:
        logger.warning(u"cannot validate alert: {count} errors found".format(count=len(errors)))
        logger.info(u"generating dummy alert")
        return False, {
            "time": unicode(time.strftime("%Y-%m-%dT%H:%M:%SZ", time.localtime())),
            "module_name": unicode("XLM-OTHE-NOCL-000 Alert validation error: {err}".format(err=", ".join(errors))),
            "events": []}
    return True, alert_json




def format_alert(alert_json):

    def get_first_of(jsdata={}, fields=[], default="-"):
        for field in fields:
            if field in jsdata:
                return jsdata[field]
        return default

    logger.info("formatting alert")
    # Base XLM alert template.
    template = "<133>[qradar-offense] [{alert_desc}] [{alert_time}] [{src_ip}] [{dest_ip}] [{dst_user}] [{alert_name}]"
    try:
        # Extract time formated as the default RSA NetWitness time format.
        alert_time_raw = time.strptime(alert_json["time"], "%Y-%m-%dT%H:%M:%SZ")
        # Extract values from events if possible, otherwise loads default values.
        if "events" in alert_json and len(alert_json["events"]) >= 1:
            # src_ip = alert_json["events"][0].get("ip_src", "0.0.0.0")
            # dest_ip = alert_json["events"][0].get("ip_dst", "0.0.0.0") # OR device_ip
            # dst_user = alert_json["events"][0].get("user_dst", "N/A") # OR user_src
            src_ip = get_first_of(jsdata=alert_json["events"][0], fields=["ip_src"], default="0.0.0.0")
            dest_ip = get_first_of(jsdata=alert_json["events"][0], fields=["ip_dst", "device_ip"], default="0.0.0.0")
            dst_user = get_first_of(jsdata=alert_json["events"][0], fields=["user_dst", "user_src", "username", "ad_username_src", "ad_username_dst"], default="N/A")
        else:
            src_ip = "0.0.0.0"
            dest_ip = "0.0.0.0"
            dst_user = "N/A"
        # Generates alert description.
        alert_desc = u" ".join(alert_json["module_name"].split(' ')[1:])
        if len(alert_desc) < 1:
            alert_desc = "RSA offense"
        # Render and return XLM-suitable alert.
        return template.format(
            alert_desc=alert_desc.encode("utf-8"),
            alert_time=time.strftime("%d/%b/%Y:%H:%M:%S", alert_time_raw),
            src_ip=src_ip.encode("utf-8"),
            dest_ip=dest_ip.encode("utf-8"),
            dst_user=dst_user.encode("utf-8"),
            alert_name=alert_json["module_name"].encode("utf-8"))
    except Exception as error:
        logger.warning("cannot format alert: {err}".format(err=str(error)))
        logger.exception(error)
        logger.info("generating dummy alert")
        return template.format(
            alert_desc="Alert formatting error",
            alert_time=time.strftime("%d/%b/%Y:%H:%M:%S", time.localtime()),
            src_ip="0.0.0.0",
            dest_ip="0.0.0.0",
            dst_user="N/A",
            alert_name=unicode("XLM-OTHE-NOCL-000 Alert formatting error: {err}".format(err=str(error))))


def send_syslog(alert_xlm):
    """Send the processed alert to the EyeSight / ArcSight connector.

    Arguments:
        alert_xlm (str): Load, validated and formatted alert.
    """
    logger.info("sending alert: {alert} -> {host}:{port}".format(alert=str(alert_xlm), host=LOG_HOST, port=LOG_PORT))
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.sendto(str(alert_xlm), (LOG_HOST, LOG_PORT))
        logger.info("alert sent")
    except Exception as error:
        logger.warning("cannot send alert: {err}".format(err=str(error)))
        logger.exception(error)


def main():
    alerts_count = len(sys.argv[1:])
    logger.info("alerts count: {count}".format(count=alerts_count))
    for alert_n, alert_raw in enumerate(sys.argv[1:]):
        logger.info("processing alert {n} on {count}".format(n=(alert_n+1), count=alerts_count))
        status_loading, alert_json = load_alert(alert_raw)
        if status_loading is True:
            status_validation, alert_valid = validate_alert(alert_json)
        else:
            alert_valid = alert_json
        alert_xlm = format_alert(alert_valid)
        send_syslog(alert_xlm)


if __name__ == "__main__":
    logger.debug("script called")
    main()
